import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Tipos
interface Document {
  document_id: string;
  source: string;
  legal_document_name?: string;
  content?: string;
  similarity_score?: number;
  chunk_id?: string;
}

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

// Configuraci√≥n
if (!process.env.GOOGLE_API_KEY) {
  throw new Error('GOOGLE_API_KEY no est√° configurada');
}

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// Funci√≥n para obtener embeddings usando Gemini
async function getEmbeddings(text: string): Promise<number[]> {
  try {
    const model = genAI.getGenerativeModel({ model: 'embedding-001' });
    const result = await model.embedContent(text);
    const embedding = result.embedding.values;
    
    if (!embedding || embedding.length !== 768) {
      throw new Error('Embedding inv√°lido');
    }
    
    return embedding;
  } catch (error) {
    console.error('Error al obtener embeddings:', error);
    throw error;
  }
}

// Funci√≥n para buscar documentos similares usando RPC (vectorial)
async function searchSimilarDocuments(query: string, supabase: any, limit: number = 10): Promise<any[]> {
  try {
    console.log('üîç Buscando documentos similares para:', query);
    
    // Obtener embedding de la consulta
    const queryEmbedding = await getEmbeddings(query);
    console.log('‚úÖ Embedding generado, longitud:', queryEmbedding.length);
    
    // DIAGN√ìSTICO: Verificar qu√© documentos existen
    console.log('üîç DIAGN√ìSTICO: Verificando documentos en la base de datos...');
    const { data: allDocuments, error: docsError } = await supabase
      .from('documents')
      .select('document_id, source')
      .limit(20);
    
    if (docsError) {
      console.error('‚ùå Error al obtener documentos:', docsError);
    } else {
      console.log('üìö Documentos disponibles:', allDocuments?.map((d: any) => d.source) || []);
    }
    
    // DIAGN√ìSTICO: Verificar embeddings
    console.log('üîç DIAGN√ìSTICO: Verificando embeddings...');
    const { data: embeddingsCount, error: embError } = await supabase
      .from('embeddings')
      .select('vector_id', { count: 'exact' });
    
    if (embError) {
      console.error('‚ùå Error al contar embeddings:', embError);
    } else {
      console.log(`üìä Total de embeddings: ${embeddingsCount?.length || 0}`);
    }
    
    // DIAGN√ìSTICO: Buscar espec√≠ficamente por "condominio"
    console.log('üîç DIAGN√ìSTICO: Buscando chunks que contengan "condominio"...');
    const { data: condominioChunks, error: condError } = await supabase
      .from('chunks')
      .select('chunk_id, chunk_text, documents!inner(source)')
      .ilike('chunk_text', '%condominio%')
      .limit(5);
    
    if (condError) {
      console.error('‚ùå Error al buscar condominio:', condError);
    } else {
      console.log(`üìÑ Chunks con "condominio": ${condominioChunks?.length || 0}`);
      if (condominioChunks && condominioChunks.length > 0) {
        console.log('üìÑ Ejemplos de chunks con condominio:');
        condominioChunks.slice(0, 2).forEach((chunk: any, idx: number) => {
          console.log(`  ${idx + 1}. ${chunk.documents.source}: ${chunk.chunk_text.substring(0, 200)}...`);
        });
      }
    }
    
    // Buscar documentos similares usando la funci√≥n RPC
    console.log('üîç Ejecutando match_documents RPC...');
    const { data: matchingDocuments, error } = await supabase.rpc('match_documents', {
      query_embedding: queryEmbedding,
      match_count: limit
    });

    if (error) {
      console.error('‚ùå Error en b√∫squeda RPC:', error);
      throw error;
    }

    console.log(`üìä Encontrados ${matchingDocuments?.length || 0} documentos similares`);
    
    // DIAGN√ìSTICO: Mostrar los documentos encontrados
    if (matchingDocuments && matchingDocuments.length > 0) {
      console.log('üìÑ Documentos encontrados por RPC:');
      matchingDocuments.forEach((doc: any, idx: number) => {
        console.log(`  ${idx + 1}. ${doc.source} (score: ${doc.similarity_score?.toFixed(4)})`);
        console.log(`     Document ID: ${doc.document_id || 'N/A'}`);
        console.log(`     Chunk ID: ${doc.chunk_id || 'N/A'}`);
        console.log(`     Legal Document Name: ${doc.legal_document_name || 'N/A'}`);
        if (doc.content) {
          console.log(`     Contenido: ${doc.content.substring(0, 300)}...`);
        } else if (doc.chunk_text) {
          console.log(`     Chunk Text: ${doc.chunk_text.substring(0, 300)}...`);
        } else {
          console.log(`     ‚ö†Ô∏è NO HAY CONTENIDO DISPONIBLE`);
        }
        console.log('     ' + '-'.repeat(50));
      });
    } else {
      console.log('‚ö†Ô∏è No se encontraron documentos similares');
    }
    
    return matchingDocuments || [];
    
  } catch (error) {
    console.error('Error al buscar documentos similares:', error);
    return [];
  }
}

// NUEVA FUNCI√ìN: Buscar documentos usando BM25
async function searchDocumentsBM25(query: string, supabase: any, limit: number = 10): Promise<any[]> {
  try {
    console.log('üîç BM25: Buscando documentos para:', query);
    // Llamar al endpoint /api/search-bm25 usando fetch con URL absoluta
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const response = await fetch(`${baseUrl}/api/search-bm25`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query, limit })
    });
    const result = await response.json();
    if (!result.success) {
      console.error('‚ùå Error en b√∫squeda BM25 v√≠a API:', result.error || result.details);
      return [];
    }
    console.log(`‚úÖ BM25 v√≠a API: Resultados procesados: ${result.results?.length || 0}`);
    return result.results || [];
  } catch (error) {
    console.error('‚ùå Error general en BM25 v√≠a API:', error);
    return [];
  }
}

// Funci√≥n para generar respuesta usando Gemini
async function generateResponse(query: string, context: string): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
    
    // DIAGN√ìSTICO: Mostrar el contexto completo que se est√° enviando
    console.log('üîç DIAGN√ìSTICO: Contexto que se enviar√° al modelo:');
    console.log('='.repeat(80));
    console.log('CONTEXTO COMPLETO:');
    console.log(context);
    console.log('='.repeat(80));
    console.log(`üìä Longitud del contexto: ${context.length} caracteres`);
    console.log(`üìÑ N√∫mero de documentos en contexto: ${(context.match(/=== .* ===/g) || []).length}`);
    
    const systemPrompt = `Eres un asistente legal especializado en derecho mexicano. 
    
Tu tarea es responder preguntas legales usando √öNICAMENTE la informaci√≥n proporcionada en el contexto. 

INSTRUCCIONES IMPORTANTES:
1. Usa SOLO la informaci√≥n del contexto para responder
2. Si el contexto no contiene informaci√≥n relevante para la pregunta, ind√≠calo claramente
3. Cita art√≠culos espec√≠ficos cuando sea posible
4. Mant√©n un tono profesional y t√©cnico
5. Organiza tu respuesta de manera clara y estructurada
6. NO inventes informaci√≥n que no est√© en el contexto

CONTEXTO DISPONIBLE:
${context}

PREGUNTA DEL USUARIO:
${query}

RESPUESTA:`;

    // DIAGN√ìSTICO: Mostrar el prompt completo
    console.log('üîç DIAGN√ìSTICO: Prompt completo que se enviar√° a Gemini:');
    console.log('='.repeat(80));
    console.log(systemPrompt);
    console.log('='.repeat(80));

    const result = await model.generateContent(systemPrompt);
    const response = await result.response;
    
    return response.text();
  } catch (error) {
    console.error('Error al generar respuesta:', error);
    return 'Hubo un error al procesar tu consulta. Por favor, intenta de nuevo.';
  }
}

// NUEVA FUNCI√ìN: Extraer art√≠culos referenciados
function extractReferencedArticles(vectorResults: any[], bm25Results: any[]): any[] {
  const articles = new Map<string, any>();
  
  // Funci√≥n para extraer art√≠culos de un texto
  const extractArticlesFromText = (text: string, source: string, method: string, score: number) => {
    // Patr√≥n para encontrar "ART√çCULO N" o "Art√≠culo N"
    const articleRegex = /art[√≠i]culo\s+(\d+)/gi;
    let match;
    
    while ((match = articleRegex.exec(text)) !== null) {
      const articleNum = match[1];
      const key = `${source}-${articleNum}`;
      
      if (!articles.has(key)) {
        articles.set(key, {
          document: source,
          article: articleNum,
          methods: [],
          scores: []
        });
      }
      
      const article = articles.get(key);
      if (!article.methods.includes(method)) {
        article.methods.push(method);
      }
      article.scores.push(score);
    }
  };
  
  // Procesar resultados vectoriales
  vectorResults.forEach(doc => {
    const content = doc.chunk_text || doc.content || '';
    const source = doc.legal_document_name || doc.source || 'Documento legal';
    extractArticlesFromText(content, source, 'Vectorial', doc.similarity_score || 0);
  });
  
  // Procesar resultados BM25
  bm25Results.forEach(doc => {
    const content = doc.content || '';
    const source = doc.source || 'Documento legal';
    extractArticlesFromText(content, source, 'BM25', doc.rank_score || 0);
  });
  
  // Convertir a array y ordenar por documento y n√∫mero de art√≠culo
  return Array.from(articles.values()).sort((a, b) => {
    // Primero: ordenar por doble match (vectorial + BM25)
    const aHasDoubleMatch = a.methods.includes('Vectorial') && a.methods.includes('BM25');
    const bHasDoubleMatch = b.methods.includes('Vectorial') && b.methods.includes('BM25');
    
    if (aHasDoubleMatch && !bHasDoubleMatch) return -1;
    if (!aHasDoubleMatch && bHasDoubleMatch) return 1;
    
    // Segundo: ordenar por score m√°s alto (descendente)
    const aMaxScore = Math.max(...a.scores);
    const bMaxScore = Math.max(...b.scores);
    
    if (aMaxScore !== bMaxScore) {
      return bMaxScore - aMaxScore; // Descendente
    }
    
    // Tercero: si tienen el mismo score, ordenar por documento y n√∫mero de art√≠culo
    if (a.document !== b.document) {
      return a.document.localeCompare(b.document);
    }
    return parseInt(a.article) - parseInt(b.article);
  });
}

export async function POST(req: NextRequest) {
  try {
    const { messages, query } = await req.json();

    if (!query) {
      return NextResponse.json({
        error: 'Se requiere una consulta (query)',
        success: false
      }, { status: 400 });
    }

    console.log('üöÄ Procesando consulta:', query);

    // Crear cliente de Supabase
    const supabase = await createClient();

    // --- NUEVO: Buscar si la consulta contiene "art√≠culo N" ---
    const articuloRegex = /art[√≠i]culo\s+(\d+)/i;
    const match = query.match(articuloRegex);
    let exactChunk = null;
    if (match) {
      const articuloNum = match[1];
      // Buscar chunk que contenga exactamente "art√≠culo N"
      const { data: exactChunks, error: exactError } = await supabase
        .from('chunks')
        .select('chunk_id, chunk_text, section_id')
        .ilike('chunk_text', `%art√≠culo ${articuloNum}%`)
        .limit(1);
      if (exactError) {
        console.error('Error en b√∫squeda exacta de art√≠culo:', exactError);
      } else if (exactChunks && exactChunks.length > 0) {
        exactChunk = exactChunks[0];
        console.log('‚úÖ Chunk exacto encontrado para art√≠culo', articuloNum);
      } else {
        console.log('‚ùå No se encontr√≥ chunk exacto para art√≠culo', articuloNum);
      }
    }

    // NUEVO: Ejecutar ambas b√∫squedas en paralelo
    console.log('üîÑ Ejecutando b√∫squedas vectorial y BM25 en paralelo...');
    const [vectorResults, bm25Results] = await Promise.all([
      searchSimilarDocuments(query, supabase, 10),
      searchDocumentsBM25(query, supabase, 10)
    ]);

    console.log(`üìä Resultados obtenidos:`);
    console.log(`   - Vectorial: ${vectorResults.length} documentos`);
    console.log(`   - BM25: ${bm25Results.length} documentos`);

    // --- NUEVO: Si hay chunk exacto, ponerlo al principio del contexto vectorial ---
    let contextDocs = vectorResults;
    if (exactChunk) {
      // Evitar duplicados si el chunk ya viene en los resultados sem√°nticos
      contextDocs = [
        { chunk_id: exactChunk.chunk_id, chunk_text: exactChunk.chunk_text, source: 'B√∫squeda exacta', legal_document_name: '', content: exactChunk.chunk_text },
        ...vectorResults.filter(doc => doc.chunk_id !== exactChunk.chunk_id)
      ];
    }

    // NUEVO: Generar respuesta solo con resultados vectoriales (como antes)
    let response = '';
    if (contextDocs && contextDocs.length > 0) {
      // Paso 2: Combinar los documentos relevantes en un solo contexto
      console.log('üîç DIAGN√ìSTICO: Construyendo contexto...');
      const context = contextDocs
        .map((doc: any, idx: number) => {
          const source = doc.legal_document_name || doc.source || 'Documento legal';
          // Intentar usar chunk_text primero, luego content
          const content = doc.chunk_text || doc.content || '';
          return `=== ${source} ===\n${content}\n=== FIN ${source} ===`;
        })
        .join('\n\n');

      console.log('üìÑ Contexto construido con', contextDocs.length, 'documentos');
      console.log(`üìä Longitud total del contexto: ${context.length} caracteres`);

      // Paso 3: Generar respuesta usando el contexto
      response = await generateResponse(query, context);
    } else {
      response = 'No encontr√© informaci√≥n relevante en los documentos legales disponibles para responder tu pregunta. Te sugiero reformular la consulta o consultar directamente con un profesional del derecho.';
    }

    // NUEVO: Generar respuesta combinada usando ambos m√©todos
    let combinedResponse = '';
    if (vectorResults.length > 0 || bm25Results.length > 0) {
      console.log('üîÑ Generando respuesta combinada...');
      
      // Combinar y deduplicar resultados de ambos m√©todos
      const allDocs = [...vectorResults, ...bm25Results];
      const uniqueDocs = allDocs.filter((doc, index, self) => 
        index === self.findIndex(d => d.chunk_id === doc.chunk_id)
      );
      
      // Ordenar por relevancia (vectorial primero, luego BM25)
      const sortedDocs = uniqueDocs.sort((a, b) => {
        const aScore = a.similarity_score || 0;
        const bScore = b.similarity_score || 0;
        return bScore - aScore;
      });
      
      // Tomar los mejores 15 documentos combinados
      const bestDocs = sortedDocs.slice(0, 15);
      
      console.log(`üìä Respuesta combinada: ${bestDocs.length} documentos √∫nicos`);
      
      // Construir contexto combinado
      const combinedContext = bestDocs
        .map((doc: any, idx: number) => {
          const source = doc.legal_document_name || doc.source || 'Documento legal';
          const content = doc.chunk_text || doc.content || '';
          const method = doc.similarity_score ? 'Vectorial' : 'BM25';
          const score = doc.similarity_score || doc.rank_score;
          return `=== ${source} (${method}, Score: ${score?.toFixed(4)}) ===\n${content}\n=== FIN ${source} ===`;
        })
        .join('\n\n');

      // Generar respuesta combinada
      combinedResponse = await generateResponse(query, combinedContext);
    } else {
      combinedResponse = 'No encontr√© informaci√≥n relevante en los documentos legales disponibles para responder tu pregunta. Te sugiero reformular la consulta o consultar directamente con un profesional del derecho.';
    }

    // NUEVO: Extraer art√≠culos referenciados
    const referencedArticles = extractReferencedArticles(vectorResults, bm25Results);
    console.log(`üìã Art√≠culos referenciados encontrados: ${referencedArticles.length}`);

    // Guardar historial
    try {
      await supabase
        .from('chat_history')
        .insert({
          query: query,
          response: response,
          documents_used: contextDocs.map((doc: any) => doc.document_id || doc.chunk_id),
          session_id: req.headers.get('x-session-id') || 'default-session',
          created_at: new Date().toISOString()
        });
    } catch (historyError) {
      console.warn('Error al guardar historial:', historyError);
    }

    // NUEVO: Devolver respuesta comparativa
    return NextResponse.json({
      success: true,
      response: response,
      combined_response: combinedResponse,
      query: query,
      timestamp: new Date().toISOString(),
      // NUEVO: Resultados comparativos
      comparison: {
        vector_results: {
          count: vectorResults.length,
          documents: vectorResults.map((doc: any) => ({
            chunk_id: doc.chunk_id,
            document_id: doc.document_id,
            source: doc.source,
            content: doc.content || doc.chunk_text,
            similarity_score: doc.similarity_score
          }))
        },
        bm25_results: {
          count: bm25Results.length,
          documents: bm25Results.map((doc: any) => ({
            chunk_id: doc.chunk_id,
            document_id: doc.document_id,
            source: doc.source,
            content: doc.content,
            rank_score: doc.rank_score
          }))
        }
      },
      // NUEVO: Art√≠culos referenciados
      referenced_articles: referencedArticles
    });

  } catch (error) {
    console.error('Error en el endpoint de chat:', error);
    return NextResponse.json({
      error: 'Error interno del servidor',
      details: error instanceof Error ? error.message : 'Error desconocido',
      success: false
    }, { status: 500 });
  }
} 