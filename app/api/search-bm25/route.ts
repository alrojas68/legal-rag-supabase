import { NextRequest, NextResponse } from 'next/server';
import { searchWithBM25Improved, searchWithBM25Highlighted, searchWithBM25Synonyms } from '@/lib/db/queries';

// Funci√≥n para stemming b√°sico en espa√±ol (simplificada)
function stemSpanishWord(word: string): string {
  // Reglas b√°sicas de stemming para espa√±ol
  const suffixes = [
    { pattern: /(ar|er|ir)$/, replacement: '' }, // verbos infinitivos
    { pattern: /(ando|iendo)$/, replacement: '' }, // gerundios
    { pattern: /(ado|ido)$/, replacement: '' }, // participios
    { pattern: /(a|e|i|o|u)s$/, replacement: '' }, // plurales
    { pattern: /(mente)$/, replacement: '' }, // adverbios
    { pattern: /(ci√≥n|siones)$/, replacement: 'c' }, // sustantivos en -ci√≥n
    { pattern: /(dad|dades)$/, replacement: 'd' }, // sustantivos en -dad
    { pattern: /(tad|tades)$/, replacement: 't' }, // sustantivos en -tad
  ];

  let stemmed = word.toLowerCase();
  for (const { pattern, replacement } of suffixes) {
    if (pattern.test(stemmed)) {
      stemmed = stemmed.replace(pattern, replacement);
      break; // Solo aplicar una regla por palabra
    }
  }
  
  return stemmed;
}

// Stopwords optimizadas para dominio legal
const legalStopwords = [
  // Stopwords generales
  'de', 'la', 'que', 'el', 'en', 'y', 'a', 'los', 'del', 'se', 'las', 'por', 'un', 'para', 'con', 'no', 'una', 'su', 'al', 'lo', 'como', 'm√°s', 'pero', 'sus', 'le', 'ya', 'o', 'este', 's√≠', 'porque', 'esta', 'entre', 'cuando', 'muy', 'sin', 'sobre', 'tambi√©n', 'me', 'hasta', 'hay', 'donde', 'quien', 'desde', 'todo', 'nos', 'durante', 'todos', 'uno', 'les', 'ni', 'contra', 'otros', 'ese', 'eso', 'ante', 'ellos', 'e', 'esto', 'm√≠', 'antes', 'algunos', 'qu√©', 'unos', 'yo', 'otro', 'otras', 'otra', '√©l', 'tanto', 'esa', 'estos', 'mucho', 'quienes', 'nada', 'muchos', 'cual', 'poco', 'ella', 'estar', 'estas', 'algunas', 'algo', 'nosotros', 'mi', 'mis', 't√∫', 'te', 'ti', 'tu', 'tus', 'ellas', 'nosotras', 'vosotros', 'vosotras', 'os', 'm√≠o', 'm√≠a', 'm√≠os', 'm√≠as', 'tuyo', 'tuya', 'tuyos', 'tuyas', 'suyo', 'suya', 'suyos', 'suyas', 'nuestro', 'nuestra', 'nuestros', 'nuestras', 'vuestro', 'vuestra', 'vuestros', 'vuestras', 'esos', 'esas', 'estoy', 'est√°s', 'est√°', 'estamos', 'est√°is', 'est√°n', 'est√©', 'est√©s', 'estemos', 'est√©is', 'est√©n', 'estar√©', 'estar√°s', 'estar√°', 'estaremos', 'estar√©is', 'estar√°n', 'estar√≠a', 'estar√≠as', 'estar√≠amos', 'estar√≠ais', 'estar√≠an', 'estaba', 'estabas', 'est√°bamos', 'estabais', 'estaban', 'estuve', 'estuviste', 'estuvo', 'estuvimos', 'estuvisteis', 'estuvieron', 'estuviera', 'estuvieras', 'estuvi√©ramos', 'estuvierais', 'estuvieran', 'estuviese', 'estuvieses', 'estuvi√©semos', 'estuvieseis', 'estuviesen', 'estando', 'estado', 'estada', 'estados', 'estadas', 'estad',
  // T√©rminos legales que S√ç queremos conservar (NO son stopwords)
  // 'art√≠culo', 'ley', 'c√≥digo', 'reglamento', 'decreto', 'norma', 'cl√°usula', 'secci√≥n', 'cap√≠tulo', 't√≠tulo'
];

// Diccionario de sin√≥nimos legales
const legalSynonyms: Record<string, string[]> = {
  'ley': ['norma', 'reglamento', 'c√≥digo', 'decreto'],
  'art√≠culo': ['art', 'art√≠culo'],
  'c√≥digo': ['c√≥digo', 'ley', 'norma'],
  'derecho': ['derechos', 'garant√≠a', 'garant√≠as'],
  'obligaci√≥n': ['obligaciones', 'deber', 'deberes'],
  'responsabilidad': ['responsabilidades', 'culpa', 'culpabilidad'],
  'procedimiento': ['procedimientos', 'tr√°mite', 'tr√°mites'],
  'registro': ['registros', 'inscripci√≥n', 'inscripciones'],
  'documento': ['documentos', 'acta', 'actas'],
  'oficial': ['oficiales', 'p√∫blico', 'p√∫blicos'],
  'civil': ['civiles', 'civil'],
  'penal': ['penales', 'penal'],
  'administrativo': ['administrativos', 'administrativa'],
  'constitucional': ['constitucionales', 'constitucional'],
  'federal': ['federales', 'federal'],
  'estatal': ['estatales', 'estatal'],
  'municipal': ['municipales', 'municipal']
};

// Funci√≥n para expandir sin√≥nimos
function expandSynonyms(terms: string[]): string[] {
  const expanded: string[] = [];
  
  for (const term of terms) {
    expanded.push(term);
    const synonyms = legalSynonyms[term.toLowerCase()];
    if (synonyms) {
      expanded.push(...synonyms);
    }
  }
  
  return [...new Set(expanded)]; // Eliminar duplicados
}

// Funci√≥n mejorada de preprocesamiento
function preprocessQuery(query: string): string {
  console.log('üîç Preprocesando query original:', query);
  
  // Paso 1: Limpieza b√°sica
  let processed = query
    .toLowerCase()
    .replace(/[¬ø?¬°!.,;:()\[\]{}\-_=+<>"'`~@#$%^&*/\\]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 2);
  
  console.log('üîç Despu√©s de limpieza:', processed);
  
  // Paso 2: Filtrar stopwords (pero conservar t√©rminos legales importantes)
  const legalTerms = ['art√≠culo', 'ley', 'c√≥digo', 'reglamento', 'decreto', 'norma', 'cl√°usula', 'secci√≥n', 'cap√≠tulo', 't√≠tulo'];
  processed = processed.filter(word => 
    !legalStopwords.includes(word) || legalTerms.includes(word)
  );
  
  console.log('üîç Despu√©s de filtrar stopwords:', processed);
  
  // Paso 3: Aplicar stemming
  const stemmed = processed.map(word => stemSpanishWord(word));
  console.log('üîç Despu√©s de stemming:', stemmed);
  
  // Paso 4: Expandir sin√≥nimos
  const withSynonyms = expandSynonyms(stemmed);
  console.log('üîç Con sin√≥nimos:', withSynonyms);
  
  // Paso 5: Construir query para to_tsquery con operadores de proximidad
  const finalQuery = withSynonyms.join(' & ');
  
  console.log('üîç Query final para to_tsquery:', finalQuery);
  return finalQuery;
}

export async function POST(req: NextRequest) {
  try {
    const { query, limit = 10, method = 'improved' } = await req.json();

    if (!query) {
      return NextResponse.json({
        error: 'Se requiere una consulta (query)',
        success: false
      }, { status: 400 });
    }

    console.log(`üîç Endpoint /api/search-bm25: B√∫squeda ${method} para "${query}"`);

    let results: any[] = [];

    // Seleccionar m√©todo de b√∫squeda
    switch (method) {
      case 'highlighted':
        results = await searchWithBM25Highlighted(query, limit);
        break;
      case 'synonyms':
        results = await searchWithBM25Synonyms(query, limit);
        break;
      case 'improved':
      default:
        results = await searchWithBM25Improved(query, limit);
        break;
    }

    // Procesar resultados para mantener compatibilidad
    const processedResults = results.map((chunk: any) => ({
      chunk_id: chunk.chunkId,
      content: chunk.chunkText,
      char_count: chunk.charCount,
      document_id: chunk.sectionId, // Nota: esto es sectionId, no documentId directo
      source: chunk.legalDocumentName || 'Documento legal',
      article_number: chunk.articleNumber,
      rank_score: chunk.bm25Score,
      highlighted_text: chunk.highlightedText
    }));

    return NextResponse.json({
      success: true,
      query,
      results: processedResults,
      count: processedResults.length,
      method: method,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Error general en BM25 con Drizzle:', error);
    return NextResponse.json({
      success: false,
      error: 'Error general al realizar b√∫squeda BM25',
      details: error instanceof Error ? error.message : 'Error desconocido'
    });
  }
}

// Endpoint GET para pruebas
export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url);
  const query = searchParams.get('q');
  const limit = parseInt(searchParams.get('limit') || '10');
  const method = searchParams.get('method') || 'improved';

  if (!query) {
    return NextResponse.json({
      error: 'Se requiere par√°metro de consulta (q)',
      success: false
    }, { status: 400 });
  }

  // Reutilizar la l√≥gica del POST
  const mockReq = {
    json: async () => ({ query, limit, method })
  } as NextRequest;

  return POST(mockReq);
} 